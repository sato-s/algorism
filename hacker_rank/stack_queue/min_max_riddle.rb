# Given an integer array of size n, find the maximum of the minimum(s) of every window size in the array. The window size varies from 1 to n.
#
# For example, given [6, 3, 5, 1, 2]
#
# Sample Input 0
#
# 4
# 2 6 1 12
# Sample Output 0
#
# 12 2 1 1
require 'pry'
# arr = [2, 6, 1, 3, 0]
arr = [2, 6, 1, 12]
arr = %w[1 2 3 5 1 13 3].map(&:to_i)

arr = %w||.map(&:to_i)

def riddle(arr)
  # Append (almost) minus infinity here
  arr << -10 ** 100

  stack = []
  hash = {}
  (0...(arr.size)).each do |i|
    if i == 0
      stack << i
    elsif arr[i-1] <= arr[i]
      stack << i
    else
      while !stack.empty? do
        break if arr[stack.last] < arr[i]
        j = stack.pop
        v = arr[j]
        # binding.pry if v == 2
        if stack.empty?
          hash[v] = i - 0
        else
          # hash[v] = #j - stack.last
          hash[v] = i - stack.last - 1
        end
      end
      stack << i
    end
  end
  summary = {}
  hash.each_pair do |k,v|
    if summary[v]
      if summary[v] < k
        summary[v] = k
      end
    else
      summary[v] = k
    end
  end

  # Calc summary
  result = []
  prev = nil
  (1..(arr.size - 1)).to_a.reverse.each do |i|
    if summary[i]
      prev = summary[i]
      result << summary[i]
    else
      result << prev
    end
  end
  result.reverse!

  binding.pry
  return result
end

p riddle(arr)
